.. _run_examples:

Run examples
==================================
This sections gives examples on how to use the three modes of TandemMod.

Train m6A model using IVET m6A dataset
********************
IVET datasets have been uploaded to GEO database under the accession number GSE227087. To train a m6A detection model, the followinng two fast5 files (m6A-modified and unmodified) are required.
::
    IVET_DRS_m6A.tar.gz 
    IVET_DRS_unmodified.tar.gz 
    

In this demo, subsets of the two datasets were taken for demonstration purposes due to the large size of the original datasets.
::
    demo
    └── IVET
        ├── IVET_m6A
        │   └── IVET_m6A.fast5
        └── IVET_unmod
            └── IVET_unmod.fast5


**1. Guppy basecalling**
::
    #m6A 
    guppy_basecaller -i demo/IVET/IVET_m6A -s demo/IVET/IVET_m6A_guppy --num_callers 40 --recursive --fast5_out --config rna_r9.4.1_70bps_hac.cfg
    
    #unmodified
    guppy_basecaller -i demo/IVET/IVET_unmod -s demo/IVET/IVET_unmod_guppy --num_callers 40 --recursive --fast5_out --config rna_r9.4.1_70bps_hac.cfg

**2. Multi-reads FAST5 files to single-read FAST5 files**

Convert multi-reads FAST5 files to single-read FAST5 files. If the data generated by the sequencing device is already in the single-read format, this step can be skipped.
::
    #m6A 
    multi_to_single_fast5 -i demo/IVET/IVET_m6A_guppy -s demo/IVET/IVET_m6A_guppy_single --recursive
    
    #unmodified
    multi_to_single_fast5 -i demo/IVET/IVET_unmod_guppy -s demo/IVET/IVET_unmod_guppy_single --recursive

**3. Tombo resquiggling**
::
    #m6A
    tombo resquiggle --overwrite --basecall-group Basecall_1D_001 demo/IVET/IVET_m6A_guppy_single  demo/IVET_reference.fa --processes 40 --fit-global-scale --include-event-stdev
    
    #unmodified
    tombo resquiggle --overwrite --basecall-group Basecall_1D_001 demo/IVET/IVET_unmod_guppy_single  demo/IVET_reference.fa --processes 40 --fit-global-scale --include-event-stdev

**4. Map reads to reference**
::
    #m6A
    cat demo/IVET/IVET_m6A_guppy/pass/*.fastq >demo/IVET/IVET_m6A.fastq
    minimap2 -ax map-ont demo/IVET_reference.fa demo/IVET/IVET_m6A.fastq >demo/IVET/IVET_m6A.sam

    #unmodified
    cat demo/IVET/IVET_unmod_guppy/pass/*.fastq >demo/IVET/IVET_unmod.fastq
    minimap2 -ax map-ont demo/IVET_reference.fa demo/IVET/IVET_unmod.fastq >demo/IVET/IVET_unmod.sam

**5. Feature extraction**
::
    #m6A
    python scripts/extract_signal_from_fast5.py -p 40 --fast5 demo/IVET/IVET_m6A_guppy_single --reference demo/IVET_reference.fa --sam demo/IVET/IVET_m6A.sam --output demo/IVET/m6A.signal.tsv --clip=10
    python scripts/extract_feature_from_signal.py  --signal_file demo/IVET/m6A.signal.tsv --clip 10 --output demo/IVET/m6A.feature.tsv --motif DRACH
    
    #unmodified
    python scripts/extract_signal_from_fast5.py -p 40 --fast5 demo/IVET/IVET_unmod_guppy_single --reference demo/IVET_reference.fa --sam demo/IVET/IVET_unmod.sam --output demo/IVET/unmod.signal.tsv --clip=10
    python scripts/extract_feature_from_signal.py  --signal_file demo/IVET/unmod.signal.tsv --clip 10 --output demo/IVET/unmod.feature.tsv --motif DRACH

In the feature extraction step, the motif pattern should be provided using the argument ``--motif``. The base symbols of the motif follow the IUB code standard. Here is the full definition of IUB base symbols:

+-------------+-------------+
| IUB Base    | Expansion   |
+=============+=============+
| A           | A           |
+-------------+-------------+
| C           | C           |
+-------------+-------------+
| G           | G           |
+-------------+-------------+
| T           | T           |
+-------------+-------------+
| M           | AC          |
+-------------+-------------+
| V           | ACG         |
+-------------+-------------+
| R           | AG          |
+-------------+-------------+
| H           | ACT         |
+-------------+-------------+
| W           | AT          |
+-------------+-------------+
| D           | AGT         |
+-------------+-------------+
| S           | CG          |
+-------------+-------------+
| B           | CGT         |
+-------------+-------------+
| Y           | CT          |
+-------------+-------------+
| N           | ACGT        |
+-------------+-------------+
| K           | GT          |
+-------------+-------------+



**6. Train-test split**
::
    #m6A
    python scripts/train_test_split.py --input_file demo/IVET/m6A.feature.tsv --train_file demo/IVET/m6A.train.feature.tsv --test_file demo/IVET/m6A.test.feature.tsv --train_ratio 0.8
    
    #unmodified
    python scripts/train_test_split.py --input_file demo/IVET/unmod.feature.tsv --train_file demo/IVET/unmod.train.feature.tsv --test_file demo/IVET/unmod.test.feature.tsv --train_ratio 0.8


**7. Train m6A model**
::
    python scripts/TandemMod.py --run_mode train \
      --new_model demo/model/m6A.demo.IVET.pkl \
      --train_data_mod demo/IVET/m6A.train.feature.tsv \
      --train_data_unmod demo/IVET/unmod.train.feature.tsv \
      --test_data_mod demo/IVET/m6A.test.feature.tsv \
      --test_data_unmod demo/IVET/unmod.test.feature.tsv

During training process, the following information can be used to monitor and evaluate the performance of the model:
::
    device= cpu
    train process.
    data loaded.
    start training.
    Start training...
    Epoch 0-0 Train acc: 0.494000,Test Acc: 0.581081,time0:00:08.936393
    Epoch 1-0 Train acc: 0.514000,Test Acc: 0.817568,time0:00:06.084542
    Epoch 2-0 Train acc: 0.796000,Test Acc: 0.668919,time0:00:06.000019
    Epoch 3-0 Train acc: 0.672000,Test Acc: 0.770270,time0:00:07.456637
    Epoch 4-0 Train acc: 0.786000,Test Acc: 0.763514,time0:00:06.132852
    Epoch 5-0 Train acc: 0.824000,Test Acc: 0.834459,time0:00:06.584059
    Epoch 6-0 Train acc: 0.810000,Test Acc: 0.814189,time0:00:06.600892
    Epoch 7-0 Train acc: 0.780000,Test Acc: 0.790541,time0:00:07.301838

After the data processing and model training process, the following files should be generated by TandemMod. The trained model ``m6A.demo.IVET.pkl`` will be saved in the ``./demo/model/`` folder.
::
    demo
    ├── IVET
    │   ├── IVET_m6A
    │   ├── IVET_m6A.fastq
    │   ├── IVET_m6A_guppy
    │   ├── IVET_m6A_guppy_single
    │   ├── IVET_m6A.sam
    │   ├── IVET_unmod
    │   ├── IVET_unmod.fastq
    │   ├── IVET_unmod_guppy
    │   ├── IVET_unmod_guppy_single
    │   ├── IVET_unmod.sam
    │   ├── m6A.feature.tsv
    │   ├── m6A.signal.tsv
    │   ├── m6A.test.feature.tsv
    │   ├── m6A.train.feature.tsv
    │   ├── unmod.feature.tsv
    │   ├── unmod.signal.tsv
    │   ├── unmod.test.feature.tsv
    │   └── unmod.train.feature.tsv
    ├── IVET_reference.fa
    └── model
           └── m6A.demo.IVET.pkl


Train m6A model using curlcake m6A dataset
********************




Transfer m6A model to m7G using ELIGOS dataset
********************




Predict m6A sites in human cell lines
********************